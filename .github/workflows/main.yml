name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SERVER_HOST: ${{ secrets.SERVER_HOST }} # берем из секретов
  SERVER_USER: ${{ secrets.SERVER_USER }} # берем из секретов
  SERVER_SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_PRIVATE_KEY }} # берем из секретов
  PYTHON_VERSION: '3.x'
  PATH_TO_LINT: 'src tests'
  PROJECT_NAME: 'otus-simple-project'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2 #извлекает репозиторий. Типа клона внутрь раннера
    - name: Set up Python
      uses: actions/setup-python@v2 #запускает код для настройки окружения
      with:
        python-version: ${{ env.PYTHON_VERSION }} # надо передать версию
    - name: Install dependencies # запускаем на этом джобе все зависимости
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-lint.txt
        pip install -r requirements-test.txt
        pip install -r requirements.txt
    - name: Run black # джоба для запуска линтера black
      run: black --check ${{ env.PATH_TO_LINT }} # в каких папках запускать
    - name: Run isort # джоба для запуска сортера isort
      run: isort --profile black --check ${{ env.PATH_TO_LINT }} # в каких папках запускать
    - name: Run pylint # джоба для запуска линтера pylint
      run: pylint ${{ env.PATH_TO_LINT }} # в каких папках запускать

  test: #второй джоб. С тестом. Все тоже самое. Только в конце запускаем тест
    needs: lint # для запуска, ждем что джопа lint отработала
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install -r requirements.txt
    - name: Run tests
      run: pytest --cov=src tests

  build: # сборка билда.
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Copy requirements.txt to server
        uses: appleboy/scp-action@master # action для копирование файлов и артефактов по ssh
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_PRIVATE_KEY }}
          source: "requirements.txt,src,models"
          target: "${{ env.PROJECT_NAME }}" # из источника кладем в таргет

      - name: Build production environment # мы все затащили на раннер
        uses: appleboy/ssh-action@master # action для выполнение ssh на удаленных серверах
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_PRIVATE_KEY }} # создаем там папку, переходим, проверям venv и создаем, если что
          script: | # активируем окружение, если его нет, устанавливаем зависимости
            mkdir -p ${{ env.PROJECT_NAME }} || true
            cd ${{ env.PROJECT_NAME }}
            # check venv
            if [ ! -d ".venv" ]; then
              python3 -m venv .venv
            fi
            # activate venv
            source .venv/bin/activate
            # install dependencies
            pip install --upgrade pip
            pip install -r requirements.txt

  deploy: # последняя джоба.  прописываем путь, активируем окружение, прописываем порт для стримлита
    needs: build #запускаем обучение, запускаем стримлит. Выполняется после build
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.SERVER_HOST }}
        username: ${{ env.SERVER_USER }}
        key: ${{ env.SERVER_SSH_PRIVATE_KEY }}
        script: |
          cd ${{ env.PROJECT_NAME }}
          export PYTHONPATH=$(pwd)
          source .venv/bin/activate
          export STREAMLIT_PID=$(lsof -t -i:8501) || true
          kill $STREAMLIT_PID || true
          python3 src/train.py
          nohup streamlit run src/app.py --server.port 8501 > streamlit.log 2>&1 &
